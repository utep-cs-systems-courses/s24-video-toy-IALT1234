#include <msp430.h>
#include <libTimer.h>
#include "lcdutils.h"
#include "lcddraw.h"

#define SCREEN_CENTER_X (screenWidth / 2)
#define SCREEN_CENTER_Y (screenHeight / 2)
#define SQUARE_SIZE 20
#define BG_COLOR COLOR_BLACK
#define SQUARE_COLOR COLOR_YELLOW


#include <msp430.h>
#include "libTimer.h"
#include "buzzer.h"
#include "led.h"

#define A 2272
#define E 3024
#define E4 1516
#define D 1702
#define G 2551
#define B 2028
#define F 2863
#define C3 3816
#define PAUSE 0

#define BUTTON1 BIT0
#define BUTTON2 BIT2
#define BUTTON3 BIT3
void button_init() {

  P2DIR &= ~(BUTTON1 | BUTTON2 | BUTTON3);
  P2REN |= (BUTTON1 | BUTTON2 | BUTTON3 );
  P2OUT |= (BUTTON1 | BUTTON2 | BUTTON3 );
}
int button_down() {
  return !(P2IN & BUTTON1); // Return true if button is pressed (P2.2 is low)
}
int button2_down() {
  return !(P2IN & BUTTON2); // Return true if button 2 (P2.1) is pressed
}
int button3_down() {
  return !(P2IN & BUTTON3); // Return true if button is pressed (P2.2 is low)
}

void draw_square(int x, int y, unsigned int color) {
  fillRectangle(40,40, SQUARE_SIZE, SQUARE_SIZE, color);
}
void play_note(int note){
  buzzer_set_period(note); __delay_cycles(2000000);//IN
  buzzer_set_period(PAUSE); __delay_cycles(2000000);
}

void play_verse(){

  int notes[] = {B,PAUSE, C3, D, PAUSE,PAUSE,PAUSE, B,A,PAUSE,B,G,PAUSE,PAUSE,PAUSE,B,PAUSE,B,A,PAUSE,G,E,PAUSE,PAUSE,E,B,PAUSE,B,A,PAUSE,PAUSE,PAUSE};
  int size = sizeof(notes) / sizeof(notes[0]);
  for (int i = 0; i < size; i++) {
    play_note(notes[i]);
  }
}
void play_chorus(){

  int notes[] = {D,PAUSE,PAUSE,D,PAUSE,PAUSE,D,PAUSE,PAUSE,D,PAUSE,E4,A,PAUSE,A,A,PAUSE,A,A,PAUSE,PAUSE,PAUSE,PAUSE,A,PAUSE,A,A,PAUSE,A,A,PAUSE,PAUSE,PAUSE,G,PAUSE,G,G,PAUSE,G,G,PAUSE,PAUSE,PAUSE};
  int size = sizeof(notes) / sizeof(notes[0]);
  for (int i = 0; i < size; i++) {
    play_note(notes[i]);
  }
}

void draw_submarine(){
  
  fillRectangle(0,20,screenWidth,screenHeight-20, COLOR_BLUE);
  fillRectangle(0,0,screenWidth,50, COLOR_SKY_BLUE);
  fillRectangle(30,60, 80,40, COLOR_YELLOW);
  fillRectangle(90,60, 20,20, COLOR_NAVY);
  fillRectangle(SCREEN_CENTER_X,40, 5,20, COLOR_BLACK);
  fillRectangle(SCREEN_CENTER_X,40, 20,5, COLOR_BLACK);
  fillRectangle(18,83, 12,2, COLOR_GRAY);
  fillRectangle(16,77, 2,6, COLOR_GRAY);
  fillRectangle(16,85, 2,6, COLOR_GRAY);
 
}
void main() {

  configureClocks();

  lcd_init();

  clearScreen(BG_COLOR);

  buzzer_init();

  button_init();

  draw_submarine();

  // Initialize variables

  int timer_count = 0;

  int total_time = 10000; // 10 seconds

  int function_index = 0;
  while (1) {
    if(button_down()){
      play_verse();
    }
    if (button2_down()) {
     
      timer_count = 0; // Reset timer count when button is pressed

      int elapsed_time = 0;



      while (elapsed_time < total_time) {

	if (timer_count >= 1000) {
	  timer_count = 0;
        }
 	  if (function_index == 0) {
       
             fillRectangle(16,77, 2,3, COLOR_GRAY);
	     fillRectangle(16,88, 2,3, COLOR_GRAY);

	  } else if (function_index == 1) {
             fillRectangle(16,77, 2,6, COLOR_BLUE);
             fillRectangle(16,85, 2,6, COLOR_BLUE);
 
	     fillRectangle(16,83, 2,2, COLOR_GRAY);

	    
	  } else if (function_index == 3) {
             fillRectangle(16,77, 2,3, COLOR_GRAY);
	     fillRectangle(16,88, 2,3, COLOR_GRAY);

	  } else if (function_index == 2) {
             fillRectangle(16,77, 2,6, COLOR_GRAY);
             fillRectangle(16,85, 2,6, COLOR_GRAY);
	     
	     fillRectangle(16,83, 2,2, COLOR_BLUE);
	  }
	  
	  function_index = (function_index + 1) % 3;
	  elapsed_time += 1000; 
	
        __delay_cycles(10000); 
	timer_count += 1;   
      }

    }
    else if(button3_down){
      //play_chorus();
    }
  }

}
